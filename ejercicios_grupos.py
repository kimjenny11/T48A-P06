# -*- coding: utf-8 -*-
"""Ejercicios_grupos.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pT29nSVWwzdqNYCJcYwUxQalIY7Gx-3F
"""

import pandas as pd

df_attendance = pd.read_csv('attendance.csv')
df_groups = pd.read_csv('STUDENT_GROUP.csv')

'''print(f"df_attendance: {df_attendance}")
print(f"df_groups: {df_groups}")'''

#Buscar que funci칩n de pandas hace un inner join utilizando como indice la columna de la matricula

from google.colab import drive
drive.mount('/content/drive')

df_attendance.head()

df_groups.tail()

df_groups.dtypes

df_attendance.dtypes

#Cambiar el nombre de la columna en el dataframe (inplace = true) -> cambio permanente
df_attendance.rename(columns={'STUDENT_ID': 'student_id'}, inplace=True)
df_attendance = df_attendance.rename(columns={'STUDENT_ID': 'student_id'})

"""# Nueva secci칩n"""

df_attendance.head(1)

df_groups.describe() #Genera est치distica en columnas que son de tipo entero y flotante

df_attendance.describe()

import pandas as pd

#Convertimos la columna 'student_id' a numero y si hay un error le asigna NaN
df_attendance['student_id'] = pd.to_numeric(df_attendance['student_id'], errors='coerce')

#Elimina las filas de la columna 'student_id' que sean NaN
df_attendance.dropna(subset=['student_id'], inplace=True)

#Convierte los registros de 'student_id' a enteros de tipo int64
df_attendance['student_id'] = df_attendance['student_id'].astype('int64')

df_attendance.describe()

#prompt: merge df_attendande with df_groups and keep only records with student_id in df

#Hace un inner join de df_attendande y df_groups por 'student_id'
df_merged = pd.merge(df_attendance, df_groups, on='student_id', how='inner')

#del frame 'df_merged' solo trae los que tengan valores numericos
filtered_df = df_merged[df_merged['student_id'].notna()]

filtered_df

#Filtrar por a침o 2025
filtered_year = filtered_df[(filtered_df['DT'] >= '2025-01-01') & (filtered_df['DT'] < '2026-01-01')]
filtered_year.tail()

#Filtrar por grupo 20251ST48A
filtered_group = filtered_df[filtered_df['group_id'] == '20251ST48A']
filtered_group

filtered_group.loc[:, 'DT'] = pd.to_datetime(filtered_group['DT'], errors='coerce')
# Eliminar filas con valores NaN en la columna 'DT'
filtered_group = filtered_group.dropna(subset=['DT'])

filtered_group['DT'] = pd.to_datetime(filtered_group['DT'])
filtered_group.loc[:, 'day_of_week'] = filtered_group['DT'].dt.day_name()
print(filtered_group.head(10))  # Muestra filas

# Contar asistencias por fecha y dia
asistencias_por_dia = filtered_group.groupby(['DT', 'day_of_week'])['student_id'].count().reset_index()

# Poner nombre a columna
asistencias_por_dia.rename(columns={'student_id': 'asistencias'}, inplace=True)

# Estudiantes totales 23
total_estudiantes = 23
asistencias_por_dia['inasistencias'] = total_estudiantes - asistencias_por_dia['asistencias']

print(asistencias_por_dia)